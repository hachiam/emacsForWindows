* interface tweaks
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(scroll-bar-mode 0)
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* unicode
#+BEGIN_SRC emacs-lisp
;;; default-setting
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
(set-buffer-file-coding-system 'utf-8-unix)
(set-clipboard-coding-system 'utf-8-unix)
(set-file-name-coding-system 'utf-8-unix)
(set-keyboard-coding-system 'utf-8-unix)
(set-next-selection-coding-system 'utf-8-unix)
(set-selection-coding-system 'utf-8-unix)
(set-terminal-coding-system 'utf-8-unix)
(setq locale-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

;;;for MS-windows
(set-clipboard-coding-system 'euc-cn)
(set-default 'process-coding-system-alist
      '(("[pP][lL][iI][nN][kK]" gbk-dos . gbk-dos)
	("[cC][mM][dD][pP][rR][oO][xX][yY]" gbk-dos . gbk-dos)
	("[gG][sS]" gbk-dos . gbk-dos)))
(setq file-name-coding-system 'gbk)

;; Setting Chinese Font
(use-package cnfonts
:ensure t
:config
(cnfonts-enable)
(setq cnfonts-use-face-font-rescale t))

#+END_SRC
* theme
#+BEGIN_SRC emacs-lisp
(use-package nyan-mode
:ensure t
:config
(nyan-mode 1))

(load-theme 'spacemacs-light t)

#+END_SRC
* editer
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 160)
(setq ring-bell-function 'ignore)
(setq scroll-margin 3
      scroll-conservatively 10000)
(setq default-major-mode 'text-mode)
(mouse-avoidance-mode 'animate)
(setq frame-title-format "emacs@%b")
(electric-pair-mode 1)
(electric-indent-mode t)
(global-hl-line-mode t)
(delete-selection-mode t)
(global-linum-mode 1)
(show-paren-mode 1)
#+END_SRC
* Swiper/ivy/Counsel
#+BEGIN_SRC emacs-lisp

   (use-package counsel
  :ensure t
  :bind
  (("M-y" . counsel-yank-pop)
   :map ivy-minibuffer-map
   ("M-y" . ivy-next-line)))


  (use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "%d/%d ")
  (setq ivy-display-style 'fancy))


  (use-package swiper
  :ensure t
  :bind (("C-s" . swiper-isearch)
	 ("C-r" . swiper-isearch)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
#+END_SRC
* company
#+BEGIN_SRC emacs-lisp
(use-package company
:ensure t
:config
(setq company-idle-delay 0.08)
(setq company-minimum-prefix-length 3)

(setq company-backends
        '(company-capf company-files company-css
         (company-dabbrev-code company-gtags company-etags company-keywords)
         company-dabbrev))
(global-company-mode t))

(with-eval-after-load 'company
  (define-key company-active-map (kbd "C-n") #'company-select-next)
  (define-key company-active-map (kbd "C-p") #'company-select-previous))

#+END_SRC
* yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
:ensure t
:config
(yas-global-mode 1))

(use-package yasnippet-snippets
:ensure t)

#+END_SRC
* smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
:ensure t
:config
(smartparens-mode 1))

(use-package evil-smartparens
:ensure t
:config
(add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))

#+END_SRC
* Undo-Tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode))

#+END_SRC
* hungry-delete
#+BEGIN_SRC emacs-lisp
(use-package hungry-delete
  :ensure t
  :config
  (global-hungry-delete-mode))
#+END_SRC
* org-mode
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
      :ensure t
      :config
      (require 'org-bullets)
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
* flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
:ensure t)
#+END_SRC
* evil
#+BEGIN_SRC emacs-lisp
(use-package evil
 :ensure t
 :config
 (evil-mode 1)
)

(defun xwl-jj-as-esc ()
  (interactive)
  (if (memq evil-state '(insert replace))
      (let ((changed? (buffer-modified-p)))
          (insert "j")
          (let* ((tm (current-time))
                 (ch (read-key)))
            (if (and (eq ch ?j)
                     (< (time-to-seconds (time-since tm)) 0.5))
                (save-excursion
                  (delete-char -1)
                  (evil-force-normal-state)
                  (set-buffer-modified-p changed?))
              (insert ch))))
    (call-interactively 'evil-next-line)))

(define-key evil-insert-state-map  "j" 'xwl-jj-as-esc)
(define-key evil-replace-state-map "j" 'xwl-jj-as-esc)

#+END_SRC

* lsp-mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :ensure t)
(use-package company-lsp
  :ensure t
  :config
(push 'company-lsp company-backends))
(add-hook 'after-init-hook 'global-company-mode)
;;; cpp
(setq lsp-clients-clangd-executable "c:/Program Files/LLVM/bin/clangd.exe")
(add-hook 'c++-mode-hook 'lsp)
;;; golang
(setq lsp-clients-go-command "c:/goworkspace/bin/gopls.exe")
(add-hook 'go-mode-hook 'lsp)
;;; python
(add-hook 'python-mode-hook 'lsp)

#+END_SRC
* language
** c/c++
#+BEGIN_SRC emacs-lisp
;; gdb
(setq gdb-many-windows t        ; use gdb-many-windows by default
      gdb-show-main t)          ; Non-nil means display source file containing the main routine at startup

(require 'compile)
(setq compilation-ask-about-save nil          ; Just save before compiling
      compilation-always-kill t               ; Just kill old compile processes before starting the new one
      compilation-scroll-output 'first-error) ; Automatically scroll to first
(global-set-key (kbd "<f4>") 'compile)


#+END_SRC
** python
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook
(function (lambda ()
(setq indent-tabs-mode nil
      tab-width 2))))
#+END_SRC
** golang
#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :ensure t
)
  
#+END_SRC
** javascript
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
:ensure t
:config
(setq auto-mode-alist
  (append
  '(("\\.js\\'" . js2-mode))
  auto-mode-alist)))

#+END_SRC
** web-mode/emmet-mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
:ensure t
:config
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)))

(defun my-web-mode-hook()
 "hooks for indention"
(setq web-mode-markup-indent-offset 2)
(setq web-mode-css-indent-offset 2)
(setq web-mode-code-indent-offset 2))
(add-hook 'web-mode-hook 'my-web-mode-hook)

;;; emmet-mode
(use-package emmet-mode
:ensure t
:config
(add-hook 'sgml-mode-hook 'emmet-mode) 
(add-hook 'html-mode-hook 'emmet-mode)
(add-hook 'web-mode-hook 'emmet-mode)
(add-hook 'css-mode-hook  'emmet-mode))
#+END_SRC
** Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
     :ensure t)
#+END_SRC
** clojure
#+BEGIN_SRC emacs-lisp
(use-package clj-refactor
  :ensure t)
(defun my-clj-refactor-mode-hook ()
    (clj-refactor-mode 1)
    (yas-minor-mode 1) ; for adding require/use/import
    (cljr-add-keybindings-with-prefix "C-c C-m"))

(use-package clojure-mode
             :ensure t
             :config
             (add-hook 'clojure-mode-hook #'subword-mode)
             (add-hook 'clojure-mode-hook #'my-clj-refactor-mode-hook))

(use-package cider
             :ensure t
             :config
             (setq nrepl-popup-stacktraces nil)
             (add-hook 'cider-mode-hook 'eldoc-mode)
             ;; Replace return key with newline-and-indent when in cider mode.
             (add-hook 'cider-mode-hook '(lambda () (local-set-key (kbd "RET") 'newline-and-indent)))
             (add-hook 'cider-mode-hook #'company-mode)
             (add-hook 'cider-repl-mode-hook 'subword-mode)
             (add-hook 'cider-repl-mode-hook #'company-mode))
#+END_SRC
** racket
#+BEGIN_SRC emacs-lisp
(use-package racket-mode
:ensure t
:config
(setq racket-racket-program "racket")
(setq racket-raco-program "raco")
(add-hook 'racket-mode-hook
          (lambda ()
            (define-key racket-mode-map (kbd "C-x C-j") 'racket-run)))
(setq tab-always-indent 'complete))

#+END_SRC
** scheme
#+BEGIN_SRC emacs-lisp
(use-package geiser
:ensure t
:config
 (setq scheme-program-name "scheme")
 (setq geiser-chez-binary "scheme")
 (setq geiser-active-implementations '(chez))
)
#+END_SRC
** common lisp
#+BEGIN_SRC emacs-lisp
(use-package slime
:ensure t
:config
(add-to-list 'load-path "c:/common-lisp/sbcl.exe")
(setq inferior-lisp-program "sbcl")
(require 'slime-autoloads)
(slime-setup '(slime-fancy)))


#+END_SRC
* keybindings
#+BEGIN_SRC emacs-lisp
;;; open init-file
(defun open-init-file()
  (interactive)
  (find-file "c:/Users/weichenxi/AppData/Roaming/.emacs.d/myinit.org"))
(global-set-key (kbd "<f2>") 'open-init-file)

;;;compile for c++
(defun your-g++-compile-and-run ()
  (interactive)
  (compile (format "clang++ -pthread %s && .\\a.exe" (buffer-file-name))))
;;;compile for c
(defun your-gcc-compile-and-run ()
  (interactive)
  (compile (format "clang %s && .\\a.exe" (buffer-file-name))))

;;;binding to kbd
(eval-after-load "cc-mode"
'(progn
(define-key c++-mode-map (kbd "<f5>") #'your-g++-compile-and-run)
(define-key c-mode-base-map (kbd "<f5>") #'your-gcc-compile-and-run)))

#+END_SRC
